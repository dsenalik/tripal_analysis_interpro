<?php
/*
 * @file
 *
 * Tripal Analysis Interpro Module
 */

/**
 * Implementation of hook_install().
 */
function tripal_analysis_interpro_install() {

  // For Tripal v2 backwards compatibility, register this
  // module as an analysis.
  if (module_exists('tripal_analysis')) {
   tripal_register_analysis_child('tripal_analysis_interpro');
  }

   // Add the CV terms needed for this module.
   tripal_analysis_interpro_add_cvterms();

   tripal_analysis_interpro_add_dbs();

   tripal_analysis_interpro_create_entity_type();
}

/*******************************************************************************
 * Implementation of hook_uninstall().
 */
function tripal_analysis_interpro_uninstall() {

   // Delete all information associate with the module
   // Drupal complains when the user tries to uninstall tripal_analysis
   // and tripal_analysis_interpro at the same time. This is because Drupal drops
   // the {tripal_analysis} table before we can delete anything from it. Thus,
   // we perform a db_table_exists() check before the deletion

  // For Tripal v2 backwards compatibility, register this
  // module as an analysis.
  if (module_exists('tripal_analysis')) {
   tripal_unregister_analysis_child('tripal_analysis_interpro');
  }

   // Delete module's variables from variables table.
   db_query("DELETE FROM {variable} WHERE name=:name",
            array(':name' => 'tripal_analysis_interpro_setting'));

}
/**
 * Adds the databases used by InterPro so that results
 * can be linked to their appropriate database
 */
function tripal_analysis_interpro_add_dbs() {
  tripal_insert_db( array(
        'name' => 'INTERPRO',
        'description' => 'InterPro provides functional analysis of proteins by classifying them into families and predicting domains and important sites. It combines protein signatures from a number of member databases into a single searchable resource.',
        'url' => 'http://www.ebi.ac.uk/interpro/',
        'urlprefix' => 'http://www.ebi.ac.uk/interpro/entry/'
    )
  );
  tripal_insert_db( array(
        'name' => 'PROSITE',
        'description' => 'PROSITE is a database of protein families and domains. It consists of biologically significant sites, patterns and profiles that help to reliably identify to which known protein family a new sequence belongs. ',
        'url' => 'http://prosite.expasy.org/',
        'urlprefix' => 'http://prosite.expasy.org/cgi-bin/prosite/prosite-search-ac?'
    )
  );
  tripal_insert_db( array(
        'name' => 'PROSITE_PROFILES',
        'description' => 'PROSITE is a database of protein families and domains. It consists of biologically significant sites, patterns and profiles that help to reliably identify to which known protein family a new sequence belongs. ',
        'url' => 'http://prosite.expasy.org/',
        'urlprefix' => 'http://prosite.expasy.org/cgi-bin/prosite/prosite-search-ac?'
    )
  );
  tripal_insert_db( array(
        'name' => 'PROSITE_PATTERNS',
        'description' => 'PROSITE is a database of protein families and domains. It consists of biologically significant sites, patterns and profiles that help to reliably identify to which known protein family a new sequence belongs. ',
        'url' => 'http://prosite.expasy.org/',
        'urlprefix' => 'http://prosite.expasy.org/cgi-bin/prosite/prosite-search-ac?'
    )
  );
  tripal_insert_db( array(
        'name' => 'HAMAP',
        'description' => 'HAMAP stands for High-quality Automated and Manual Annotation of Proteins. HAMAP profiles are manually created by expert curators. They identify proteins that are part of well-conserved proteins families or subfamilies. ',
        'url' => 'http://hamap.expasy.org/',
        'urlprefix' => 'http://hamap.expasy.org/unirule/'
    )
  );
  tripal_insert_db( array(
        'name' => 'PFAM',
        'description' => 'The Pfam database is a large collection of protein families, each represented by multiple sequence alignments and hidden Markov models (HMMs).',
        'url' => 'http://pfam.xfam.org/',
        'urlprefix' => 'http://pfam.xfam.org/family/'
    )
  );
  tripal_insert_db( array(
        'name' => 'PRINTS',
        'description' => 'PRINTS is a compendium of protein fingerprints. A fingerprint is a group of conserved motifs used to characterise a protein family or domain.',
        'url' => 'http://www.bioinf.manchester.ac.uk/dbbrowser/PRINTS/',
        'urlprefix' => ''
    )
  );
  tripal_insert_db( array(
        'name' => 'PRODOM',
        'description' => 'ProDom protein domain database consists of an automatic compilation of homologous domains. Current versions of ProDom are built using a novel procedure based on recursive PSI-BLAST searches.',
        'url' => 'http://prodom.prabi.fr/',
        'urlprefix' => 'http://prodom.prabi.fr/prodom/current/cgi-bin/request.pl?question=DBEN&query='
    )
  );
  tripal_insert_db( array(
        'name' => 'SMART',
        'description' => 'SMART (a Simple Modular Architecture Research Tool) allows the identification and annotation of genetically mobile domains and the analysis of domain architectures.',
        'url' => 'http://smart.embl-heidelberg.de/',
        'urlprefix' => 'http://smart.embl-heidelberg.de/smart/do_annotation.pl?ACC='
    )
  );
  tripal_insert_db( array(
        'name' => 'TIGRFAM',
        'description' => 'TIGRFAMs is a collection of protein families, featuring curated multiple sequence alignments, hidden Markov models (HMMs) and annotation, which provides a tool for identifying functionally related proteins based on sequence homology.',
        'url' => 'http://www.jcvi.org/cgi-bin/tigrfams/index.cgi',
        'urlprefix' => 'http://www.jcvi.org/cgi-bin/tigrfams/HmmReportPage.cgi?acc='
    )
  );
  tripal_insert_db( array(
        'name' => 'PIRSF',
        'description' => 'PIRSF protein classification system is a network with multiple levels of sequence diversity from superfamilies to subfamilies that reflects the evolutionary relationship of full-length proteins and domains.',
        'url' => 'http://pir.georgetown.edu/pirwww/dbinfo/pirsf.shtml',
        'urlprefix' => 'http://pir.georgetown.edu/cgi-bin/ipcSF?id='
    )
  );
  tripal_insert_db( array(
        'name' => 'SUPERFAMILY',
        'description' => 'SUPERFAMILY is a library of profile hidden Markov models that represent all proteins of known structure. The library is based on the SCOP classification of proteins.',
        'url' => 'http://supfam.cs.bris.ac.uk/SUPERFAMILY/',
        'urlprefix' => 'http://supfam.org/SUPERFAMILY/cgi-bin/scop.cgi?sunid='
    )
  );
  tripal_insert_db( array(
        'name' => 'GENE3D',
        'description' => 'CATH-Gene3D database describes protein families and domain architectures in complete genomes. Protein families are formed using a Markov clustering algorithm, followed by multi-linkage clustering according to sequence identity. ',
        'url' => 'http://www.cathdb.info/',
        'urlprefix' => 'http://www.cathdb.info/version/latest/superfamily/'
    )
  );
  tripal_insert_db( array(
        'name' => 'PANTHER',
        'description' => 'PANTHER is a large collection of protein families that have been subdivided into functionally related subfamilies, using human expertise.',
        'url' => 'http://www.pantherdb.org/',
        'urlprefix' => 'http://www.pantherdb.org/panther/family.do?clsAccession='
    )
  );
}
/**
*
*/
function tripal_analysis_interpro_add_cvterms() {
  // Add cvterm 'analysis_interpro_output_iteration_hits' for inserting into featureprop table
  tripal_insert_cvterm(array(
    'name' => 'analysis_interpro_xmloutput_hit',
    'definition' => 'Hit in the interpro XML output. Each hit belongs to a chado feature. This cvterm represents a hit in the output',
    'cv_name' => 'tripal',
    'db_name' => 'tripal',
  ));

  tripal_insert_cvterm(array(
    'name' => 'analysis_interpro_output_hit',
    'definition' => 'Hit in the interpro HTML output. Each hit belongs to a chado feature. This cvterm represents a hit in the output',
    'cv_name' => 'tripal',
    'db_name' => 'tripal',
  ));

  tripal_insert_cvterm(array(
    'name' => 'analysis_interpro_settings',
    'definition' => 'Settings of an interpro analysis, including output file and run parameters separated by a bar |',
    'cv_name' => 'tripal',
    'db_name' => 'tripal',
  ));

  tripal_insert_cvterm(array(
    'name' => 'analysis_interpro_interproparameters',
    'definition' => 'The parameters used when executing an InterProScan job',
    'cv_name' => 'tripal',
    'db_name' => 'tripal',
  ));

  tripal_insert_cvterm(array(
    'name' => 'analysis_interpro_interprofile',
    'definition' => 'Used to hold the name of the XML file containing the InterProScan results',
    'cv_name' => 'tripal',
    'db_name' => 'tripal',
  ));

  tripal_insert_cvterm(array(
    'name' => 'analysis_interpro_parsego',
    'definition' => 'Indicates whether or not the GO terms should be extracted when parsing the InterProScan XML file',
    'cv_name' => 'tripal',
    'db_name' => 'tripal',
  ));

  tripal_insert_cvterm(array(
    'name' => 'analysis_interpro_parseHTML',
    'definition' => 'Indicates that the input file is in HTML format. This functionality is deprecated and may not work, but is provided for backwards compatability.',
    'cv_name' => 'tripal',
    'db_name' => 'tripal',
  ));

  tripal_insert_cvterm(array(
    'name' => 'analysis_interpro_query_re',
    'definition' => 'The regular expression for finding the feature name in the query definition line of the InterPro results',
    'cv_name' => 'tripal',
    'db_name' => 'tripal',
  ));

  tripal_insert_cvterm(array(
    'name' => 'analysis_interpro_query_type',
    'definition' => 'The feature type (e.g. mRNA, polypeptide) of the query input file. This type is used to identify the query feature when multiple features have the same name',
    'cv_name' => 'tripal',
    'db_name' => 'tripal',
  ));
           ;
  tripal_insert_cvterm(array(
    'name' => 'analysis_interpro_query_uniquename',
    'definition' => 'Indicates if the matched name in the query definition line of the blast results is feature uniquename',
    'cv_name' => 'tripal',
    'db_name' => 'tripal',
  ));

  tripal_insert_cvterm(array(
    'name' => 'analysis_interpro_output_keywords',
    'definition' => 'Selected keywords for interpro html output which are indexed for search.',
    'cv_name' => 'tripal',
    'db_name' => 'tripal',
  ));
}

/*******************************************************************************
 * Implementation of hook_requirements(). Make sure 'Tripal Core' and 'Tripal
 * Analysis' are enabled before installation
 */
function tripal_analysis_interpro_requirements($phase) {

  $requirements = array();
  if ($phase == 'install') {
    // make sure chado is installed
    if (!$GLOBALS["chado_is_installed"]) {
      $requirements ['tripal_feature'] = array(
          'title' => "t ripal_feature",
          'value' => "ERROR: Chado must be installed before this module can be enabled",
          'severity' => REQUIREMENT_ERROR,
      );
    }
  }
  return $requirements;
}

/**
 * Create Analysis Interpro Entity Type
 */
function tripal_analysis_interpro_create_entity_type () {

  // Add the vocabulary term.
  $term = chado_insert_cvterm(array(
    'id' => 'local:interpro_results',
    'name' => 'InterPro results',
    'cv_name' => 'local',
    'definition' => 'Results for InterPro analysis.',
  ));

  // Next add the content type
  $cvterm = tripal_get_cvterm(['id' => 'local:interpro_results']);
  $args = array(
    'vocabulary' => 'local',
    'accession' => 'interpro_results',
    'term_name' => 'InterPro results',
    'storage_args' => array(
      'data_table' => 'analysis',
      'type_linker_table' => 'analysisprop',
      'type_column' => 'type_id',
      'type_value' => 'interpro_analysis'
    )
  );
  $bundle = tripal_load_bundle_entity(['accession' => $args['vocabulary'] . ':' . $args['accession']]);
  if (!$bundle) {
    if (!tripal_create_bundle($args)) {
      $msg = t('Error encountered creating !type Content Type.', ['!type' => $args['term_name']]);
      throw new Exception($msg);
    }
  }
}

/**
 *
 */
function tripal_analysis_interpro_update_7200() {
  // We cannot use the Tripal API calls in the 7200 update
  // because during upgrade the tripal_core will be disabled
  try {
    tripal_analysis_interpro_7x_upgrade_add_db(
      'INTERPRO',
      'InterPro provides functional analysis of proteins by classifying them into families and predicting domains and important sites. It combines protein signatures from a number of member databases into a single searchable resource.',
      'http://www.ebi.ac.uk/interpro/',
      'http://www.ebi.ac.uk/interpro/entry/'
    );
    tripal_analysis_interpro_7x_upgrade_add_db(
      'PROSITE',
      'PROSITE is a database of protein families and domains. It consists of biologically significant sites, patterns and profiles that help to reliably identify to which known protein family a new sequence belongs. ',
      'http://prosite.expasy.org/',
      'http://prosite.expasy.org/cgi-bin/prosite/prosite-search-ac?'
    );
    tripal_analysis_interpro_7x_upgrade_add_db(
      'HAMAP',
      'HAMAP stands for High-quality Automated and Manual Annotation of Proteins. HAMAP profiles are manually created by expert curators. They identify proteins that are part of well-conserved proteins families or subfamilies. ',
      'http://hamap.expasy.org/',
      'http://hamap.expasy.org/unirule/'
    );
    tripal_analysis_interpro_7x_upgrade_add_db(
      'PFAM',
      'The Pfam database is a large collection of protein families, each represented by multiple sequence alignments and hidden Markov models (HMMs).',
      'http://pfam.sanger.ac.uk/',
      'http://pfam.sanger.ac.uk/family/'
    );
    tripal_analysis_interpro_7x_upgrade_add_db(
      'PRINTS',
      'PRINTS is a compendium of protein fingerprints. A fingerprint is a group of conserved motifs used to characterise a protein family or domain. PRINTS is based at the University of Manchester, UK.',
      'http://www.bioinf.manchester.ac.uk/dbbrowser/PRINTS/',
      ''
    );
    tripal_analysis_interpro_7x_upgrade_add_db(
      'PRODOM',
      'ProDom protein domain database consists of an automatic compilation of homologous domains. Current versions of ProDom are built using a novel procedure based on recursive PSI-BLAST searches. ',
      'http://prodom.prabi.fr/',
      'http://prodom.prabi.fr/prodom/current/cgi-bin/request.pl?question=DBEN&query='
    );
    tripal_analysis_interpro_7x_upgrade_add_db(
      'SMART',
      'SMART (a Simple Modular Architecture Research Tool) allows the identification and annotation of genetically mobile domains and the analysis of domain architectures.',
      'http://smart.embl-heidelberg.de/',
      'http://smart.embl-heidelberg.de/smart/do_annotation.pl?ACC='
    );
    tripal_analysis_interpro_7x_upgrade_add_db(
      'TIGRFAM',
      'TIGRFAMs is a collection of protein families, featuring curated multiple sequence alignments, hidden Markov models (HMMs) and annotation, which provides a tool for identifying functionally related proteins based on sequence homology. ',
      'http://www.jcvi.org/cgi-bin/tigrfams/index.cgi',
      'http://www.jcvi.org/cgi-bin/tigrfams/HmmReportPage.cgi?acc='
    );
    tripal_analysis_interpro_7x_upgrade_add_db(
      'PIRSF',
      'PIRSF protein classification system is a network with multiple levels of sequence diversity from superfamilies to subfamilies that reflects the evolutionary relationship of full-length proteins and domains. ',
      'http://pir.georgetown.edu/pirwww/dbinfo/pirsf.shtml',
      'http://pir.georgetown.edu/cgi-bin/ipcSF?id='
    );
    tripal_analysis_interpro_7x_upgrade_add_db(
      'SUPERFAMILY',
      'SUPERFAMILY is a library of profile hidden Markov models that represent all proteins of known structure. The library is based on the SCOP classification of proteins.',
      'http://supfam.cs.bris.ac.uk/SUPERFAMILY/',
      'http://supfam.org/SUPERFAMILY/cgi-bin/scop.cgi?sunid='
    );
    tripal_analysis_interpro_7x_upgrade_add_db(
      'GENE3D',
      'CATH-Gene3D database describes protein families and domain architectures in complete genomes. Protein families are formed using a Markov clustering algorithm, followed by multi-linkage clustering according to sequence identity.',
      'http://www.cathdb.info/',
      'http://www.cathdb.info/version/latest/superfamily/'
    );
    tripal_analysis_interpro_7x_upgrade_add_db(
      'PANTHER',
      'PANTHER is a large collection of protein families that have been subdivided into functionally related subfamilies, using human expertise.',
      'http://www.pantherdb.org/',
      'http://www.pantherdb.org/panther/family.do?clsAccession='
    );
  }
  catch (\PDOException $e) {
    $error = $e->getMessage();
    throw new DrupalUpdateException('Failed to add or update external database: '. $error);
  }
}

/**
 * During the Drupal 6.x to 7.x we cannot use Tripal API function calls
 * so we must do database upates using Drupal API functions.  This function
 * simply wraps adding a new database record to the chado.db table
 *
 * @param $dbname
 * @param $desc
 * @param $url
 * @param $urlprefix
 */
function tripal_analysis_interpro_7x_upgrade_add_db($name, $desc, $url, $urlprefix) {
  // if the db_id already exists then we just want to update the record, otherwise, add it
  $db_id = db_query("SELECT db_id FROM chado.db WHERE name = :name", array(':name' => $name))->fetchField();
  if ($db_id) {
    db_update('chado.db')
      ->fields(array(
        'name' => $name,
        'description' => $desc,
        'url' => $url,
        'urlprefix' => $urlprefix
      ))
      ->condition('db_id', $db_id)
      ->execute();
  }
  else {
    db_insert('chado.db')
      ->fields(array(
        'name' => $name,
        'description' => $desc,
        'url' => $url,
        'urlprefix' => $urlprefix
      ))
      ->execute();
  }

}

/**
 * Create Interpro results entity type
 */
function tripal_analysis_interpro_update_7303() {
  try {
    tripal_analysis_interpro_create_entity_type();
  }
  catch (\PDOException $e) {
    $error = $e->getMessage();
    throw new DrupalUpdateException('Failed to create entity type [Interpro results]: '. $error);
  }
}

/**
 * Add cvterm mapping for the 'InterPro results' entity type
 */
function tripal_analysis_interpro_update_7304() {
  try {
    $identifier = array(
      'cv_id' => array('name' => 'local'),
      'name' => 'InterPro results'
    );
    $cvterm = tripal_get_cvterm($identifier);
    tripal_chado_add_cvterm_mapping($cvterm->cvterm_id, 'analysis', NULL);
  }
  catch (\PDOException $e) {
    $error = $e->getMessage();
    throw new DrupalUpdateException('Could not perform update: '. $error);
  }
}


/**
 * Turn on auto_attach for the Interpro field to prevent AJAX problems on entity first load.
 */
function tripal_analysis_blast_update_7305() {

  try {
    $bundles = field_info_instances('TripalEntity');
    foreach ($bundles as $bundle_name => $fields) {
      $instance_info = field_info_instance('TripalEntity', 'local__interpro_results', $bundle_name);
      if ($instance_info) {
        $instance_info['settings']['auto_attach'] = TRUE;
        field_update_instance($instance_info);
      }
    }
  }
  catch (\PDOException $e) {
    $error = $e->getMessage();
    throw new DrupalUpdateException('Could not perform update: '. $error);
  }
}
